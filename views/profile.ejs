<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="/favicon.png" />
    <title><%= user.username %> | 0gram</title>
    <style>
      :root {
        --bg-color: #121212;
        --text-color: #f5f5f5;
        --primary-color: #0095f6;
        --border-color: #363636;
        --card-bg: #1e1e1e;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family:
          -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
          Arial, sans-serif;
      }

      body {
        background-color: var(--bg-color);
        color: var(--text-color);
      }

      .container {
        max-width: 935px;
        margin: 0 auto;
        padding: 20px;
      }

      .profile-header {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 30px 0;
        border-bottom: 1px solid var(--border-color);
      }

      @media (min-width: 768px) {
        .profile-header {
          flex-direction: row;
          align-items: flex-start;
        }
      }

      .profile-pic-container {
        position: relative;
        width: 150px;
        height: 150px;
        margin-right: 30px;
      }

      .profile-pic {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        object-fit: cover;
        border: 1px solid var(--border-color);
        background-color: var(--card-bg);
      }

      .profile-pic-loader {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 40px;
        height: 40px;
        margin-top: -20px;
        margin-left: -20px;
        border: 4px solid var(--border-color);
        border-top-color: var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      .profile-info {
        flex: 1;
        text-align: center;
      }

      @media (min-width: 768px) {
        .profile-info {
          text-align: left;
        }
      }

      .username {
        font-size: 28px;
        font-weight: 300;
        margin-bottom: 10px;
      }

      .bio {
        margin: 15px 0;
        line-height: 1.5;
        white-space: pre-line;
      }

      .stats {
        display: flex;
        justify-content: space-around;
        margin: 20px 0;
      }

      @media (min-width: 768px) {
        .stats {
          justify-content: flex-start;
          gap: 40px;
        }
      }

      .stat {
        text-align: center;
      }

      .stat-count {
        font-weight: 600;
        font-size: 16px;
      }

      .stat-label {
        font-size: 14px;
        color: var(--text-color);
        opacity: 0.8;
      }

      .bio-links {
        margin-top: 15px;
      }

      .bio-link {
        color: var(--primary-color);
        text-decoration: none;
        display: inline-block;
        margin-right: 15px;
        margin-bottom: 5px;
      }

      .media-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 3px;
        margin-top: 30px;
      }

      @media (min-width: 768px) {
        .media-grid {
          gap: 28px;
        }
      }

      .media-item {
        aspect-ratio: 1;
        position: relative;
        overflow: hidden;
        background: var(--card-bg);
        cursor: pointer;
        border-radius: 8px;
        transition: transform 0.2s ease;
      }

      .media-item:hover {
        transform: scale(1.02);
      }

      .media-item .failed-load {
        color: var(--text-color);
        opacity: 0.5;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
      }

      .media-item img,
      .media-item video {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 8px;
      }

      .video-indicator {
        position: absolute;
        top: 8px;
        right: 8px;
        width: 24px;
        height: 24px;
        background: rgba(0, 0, 0, 0.8);
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 12px;
      }

      .video-indicator::before {
        content: "â–¶";
      }

      .load-more {
        text-align: center;
        margin: 40px 0;
      }

      .load-more-btn {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 14px;
        cursor: pointer;
        transition: background 0.2s;
      }

      .load-more-btn:hover {
        background: #007acc;
      }

      .load-more-btn:disabled {
        background: var(--border-color);
        cursor: not-allowed;
      }

      .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-out infinite;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      .loading {
        text-align: center;
        padding: 20px;
        color: var(--text-color);
        opacity: 0.6;
      }

      .related-profiles {
        margin-top: 40px;
      }

      .related-title {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 20px;
        color: var(--text-color);
        opacity: 0.8;
      }

      .related-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 15px;
      }

      .related-profile {
        text-align: center;
      }

      .related-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 5px;
        border: 1px solid var(--border-color);
      }

      .related-username {
        font-size: 12px;
        color: var(--text-color);
        text-decoration: none;
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }

      .error-message {
        text-align: center;
        color: #ff4444;
        padding: 20px;
        margin: 20px 0;
        background: rgba(255, 68, 68, 0.1);
        border-radius: 8px;
        border: 1px solid rgba(255, 68, 68, 0.3);
      }

      .no-posts {
        text-align: center;
        color: var(--text-color);
        opacity: 0.6;
        padding: 40px 20px;
        font-size: 16px;
      }

      /* --- Modal styles (Reverted to Side-by-Side) --- */
      .modal {
        display: none;
        /* Hidden by default */
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9);
        backdrop-filter: blur(5px);
        align-items: center;
        justify-content: center;
      }

      .modal-content {
        position: relative;
        width: calc(100vw - 80px);
        height: calc(100vh - 80px);
        max-width: 1400px;
        max-height: 800px;
        background-color: var(--bg-color);
        border-radius: 8px;
        overflow: hidden;
        display: flex;
        align-items: stretch;
      }

      .modal-close {
        position: absolute;
        top: 15px;
        right: 20px;
        color: white;
        font-size: 30px;
        cursor: pointer;
        z-index: 1001;
      }

      .modal-close:hover {
        opacity: 0.7;
      }

      .modal-media-container {
        flex: 1;
        background-color: #000;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 50%;
      }

      .modal-loader {
        width: 50px;
        height: 50px;
        border: 5px solid var(--border-color);
        border-top-color: var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        position: absolute;
        z-index: 2;
      }

      .modal-media-container img,
      .modal-media-container video {
        display: none;
        width: 100%;
        height: 100%;
        object-fit: contain;
      }

      .modal-info-panel {
        flex-basis: 450px;
        flex-shrink: 0;
        border-left: 1px solid var(--border-color);
        display: flex;
        flex-direction: column;
        overflow: hidden;
      }

      .modal-info-header {
        display: flex;
        align-items: center;
        padding: 14px 16px;
        border-bottom: 1px solid var(--border-color);
      }

      .modal-user-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        margin-right: 14px;
      }

      .modal-user-username {
        font-weight: 600;
        font-size: 14px;
        color: var(--text-color);
        text-decoration: none;
      }

      .modal-comments-area {
        flex: 1;
        overflow-y: auto;
        padding: 16px;
      }

      .comment-item {
        display: flex;
        align-items: flex-start;
        margin-bottom: 16px;
        font-size: 14px;
        line-height: 1.4;
      }

      .comment-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        margin-right: 14px;
        flex-shrink: 0;
      }

      .comment-text {
        word-wrap: break-word;
        overflow-wrap: break-word;
        word-break: break-word;
      }

      .comment-text a {
        color: var(--text-color);
        text-decoration: none;
        font-weight: 600;
      }

      #modalCommentsLoader {
        text-align: center;
        padding: 20px;
      }

      /* This media query makes the modal mobile-friendly */
      @media (max-width: 992px) {
        .modal-content {
          flex-direction: column;
          height: calc(100vh - 40px);
          width: calc(100vw - 40px);
        }

        .modal-info-panel {
          border-left: none;
          border-top: 1px solid var(--border-color);
          flex-basis: 50%;
        }
      }

      /* wrap avatar + loader together */
      .comment-avatar-container {
        position: relative;
        width: 32px;
        height: 32px;
        flex-shrink: 0;
        /* remove any right-margin so text sits flush */
        margin-right: 0;
        margin-bottom: 0;
      }

      /* the actual avatar */
      .comment-avatar-container .comment-avatar {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        object-fit: cover;
        display: block;
      }

      /* the spinner over the avatar */
      .comment-avatar-container .comment-avatar-loader {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: 3px solid var(--border-color);
        border-top-color: var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        /* ensure itâ€™s above the image */
        z-index: 1;
      }

      /* reduce space between avatar and text */
      .comment-item {
        display: flex;
        align-items: flex-start;
        margin-bottom: 16px;
        gap: 8px;
        /* small gap; set to 0 if you want zero */
      }
    </style>
  </head>

  <body>
    <div class="container">
      <%# Profile Header %>
      <div class="profile-header">
        <div class="profile-pic-container">
          <div class="profile-pic-loader" id="pfpLoader"></div>
          <a
            href="/api/image?url=<%= encodeURIComponent(user.hd_profile_pic_url_info.url) %>"
          >
            <img
              src="/api/image?url=<%= encodeURIComponent(user.profile_pic_url) %>"
              alt="Profile Picture"
              class="profile-pic"
              id="pfpImage"
              onload="document.getElementById('pfpLoader').style.display='none';"
            />
          </a>
        </div>
        <div class="profile-info">
          <h1 class="username"><%= user.username %></h1>
          <div class="stats">
            <div class="stat">
              <div class="stat-count">
                <%= user.follower_count.toLocaleString() %>
              </div>
              <div class="stat-label">Followers</div>
            </div>
            <div class="stat">
              <div class="stat-count">
                <%= user.following_count.toLocaleString() %>
              </div>
              <div class="stat-label">Following</div>
            </div>
            <div class="stat">
              <div class="stat-count">
                <%= user.media_count.toLocaleString() %>
              </div>
              <div class="stat-label">Posts</div>
            </div>
          </div>
          <% if (user.biography) { %>
          <div class="bio"><%- user.biography.replace(/\n/g, '<br />') %></div>
          <% } %>
          <% if (user.bio_links && user.bio_links.length > 0) { %>
          <div class="bio-links">
            <% user.bio_links.forEach(link => { %><a
              href="<%= link.url %>"
              class="bio-link"
              target="_blank"
              rel="noopener noreferrer"
              ><%= link.title || link.url %></a
            ><% }); %>
          </div>
          <% } %>
        </div>
      </div>

      <%# Media Grid %>
      <% if (user.edge_owner_to_timeline_media.edges &&
      user.edge_owner_to_timeline_media.edges.length > 0) { %>
      <div class="media-grid" id="mediaGrid">
        <% user.edge_owner_to_timeline_media.edges.forEach(post => { %>
        <div
          class="media-item"
          id="post-<%= post.node.pk %>"
          data-image-url="<%= post.node.image_url %>"
          data-is-video="<%= post.node.is_video || false %>"
          data-video-url="<%= post.node.video_url || '' %>"
          data-pk="<%= post.node.pk %>"
          onclick="openModal(this.dataset.imageUrl, this.dataset.isVideo === 'true', this.dataset.videoUrl, this.dataset.pk)"
        >
          <img
            src="/api/image?url=<%= encodeURIComponent(post.node.image_url) %>"
            alt="Post"
            loading="lazy"
          />
          <% if (post.node.is_video) { %>
          <div class="video-indicator"></div>
          <% } %>
        </div>
        <% }); %>
      </div>
      <% if (user.edge_owner_to_timeline_media.page_info && user.edge_owner_to_timeline_media.page_info.has_next_page) { %>
      <div class="load-more">
        <button
          class="load-more-btn"
          id="loadMoreBtn"
          onclick="loadMorePosts()"
          style="display: none"
        >
          Load More Posts
        </button>
        <div class="loading" id="loadingIndicator" style="display: none">
          <div class="loading-spinner"></div>
        </div>
        <div
          class="error-message"
          id="errorMessage"
          style="display: none"
        ></div>
      </div>
      <% } %>
      <% } else { %>
      <div class="no-posts">This user hasn't posted anything yet</div>
      <% } %>

      <%# Related Profiles %>
      <% if (user.edge_related_profiles && user.edge_related_profiles.edges &&
      user.edge_related_profiles.length > 0) { %>
      <div class="related-profiles">
        <div class="related-title">Suggested for you</div>
        <div class="related-grid">
          <% user.edge_related_profiles.edges.slice(0, 8).forEach(profile => {
          %>
          <div class="related-profile">
            <a href="/<%= profile.node.username %>"
              ><img
                src="/api/image?url=<%= encodeURIComponent(profile.node.profile_pic_url) %>"
                alt="<%= profile.node.username %>"
                class="related-avatar"
                loading="lazy" /></a
            ><a href="/<%= profile.node.username %>" class="related-username"
              ><%= profile.node.username %></a
            >
          </div>
          <% }); %>
        </div>
      </div>
      <% } %>
    </div>

    <%# Media Modal %>
    <div id="mediaModal" class="modal">
      <span class="modal-close" onclick="closeModal()">&times;</span>
      <div class="modal-content" onclick="event.stopPropagation()">
        <div class="modal-media-container">
          <div class="modal-loader" id="modalLoader"></div>
          <img id="modalImage" alt="Full size post" />
          <video id="modalVideo" controls preload="metadata">
            Your browser does not support the video tag.
          </video>
        </div>
        <div class="modal-info-panel">
          <div class="modal-info-header">
            <img
              src=""
              alt="User Avatar"
              class="modal-user-avatar"
              id="modalUserAvatar"
            />
            <a href="#" class="modal-user-username" id="modalUserUsername"></a>
          </div>
          <div class="modal-comments-area">
            <div id="modalCommentsContainer"></div>
            <div id="modalCommentsLoader" style="display: none">
              <div class="loading-spinner"></div>
            </div>
            <div
              class="error-message"
              id="modalCommentsError"
              style="display: none"
            ></div>
          </div>
        </div>
      </div>
    </div>

    <script>
      // --- State & DOM References ---
      let nextCursor = null;
      let isLoading = false;
      const username = "<%= user.username %>";
      const modal = document.getElementById("mediaModal");
      const modalImage = document.getElementById("modalImage");
      const modalVideo = document.getElementById("modalVideo");
      const modalLoader = document.getElementById("modalLoader");
      const modalUserAvatar = document.getElementById("modalUserAvatar");
      const modalUserUsername = document.getElementById("modalUserUsername");
      const modalCommentsContainer = document.getElementById("modalCommentsContainer");
      const modalCommentsLoader = document.getElementById("modalCommentsLoader");
      const modalCommentsError = document.getElementById("modalCommentsError");
      const mediaGrid = document.getElementById("mediaGrid");

      // --- Initialize pagination ---
      <% if (user.edge_owner_to_timeline_media.page_info && user.edge_owner_to_timeline_media.page_info.has_next_page) { %>
      nextCursor = "<%= user.edge_owner_to_timeline_media.page_info.end_cursor %>";
      <% } %>

      // --- Utility ---
      function formatCommentText(text) {
        if (!text) return '';
        const mentionRegex = /@(\w+)/g;
        const hashtagRegex = /#(\w+)/g;
        return text
          .replace(mentionRegex, '<a href="/$1" target="_blank">@$1</a>')
          .replace(hashtagRegex, '<a href="/explore/tags/$1/" target="_blank">#$1</a>');
      }

      // --- Modal Logic ---
      function openModal(imageUrl, isVideo, videoUrl, id) {
        modal.style.display = "flex";
        modalLoader.style.display = "block";
        modalImage.style.display = "none";
        modalVideo.style.display = "none";
        modalVideo.pause();
        modalVideo.currentTime = 0;

        const onMediaLoaded = () => {
          modalLoader.style.display = "none";
          if (isVideo) {
            modalVideo.style.display = "block";
            modalVideo.play();
          } else {
            modalImage.style.display = "block";
          }
        };

        if (isVideo && videoUrl) {
          modalVideo.src = "/api/image?url=" + encodeURIComponent(videoUrl);
          modalVideo.onloadeddata = onMediaLoaded;
        } else {
          modalImage.src = "/api/image?url=" + encodeURIComponent(imageUrl);
          modalImage.onload = onMediaLoaded;
        }

        loadComments(id);
        window.history.pushState(null, '', `#post-${id}`);
        document.body.style.overflow = "hidden";
      }

      function closeModal() {
        modal.style.display = "none";
        modalVideo.pause();
        modalVideo.src = "";
        modalImage.src = "";
        modalCommentsContainer.innerHTML = '';
        modalUserAvatar.src = '';
        modalUserUsername.textContent = '';
        modalUserUsername.href = '#';
        modalCommentsError.style.display = 'none';

        if (window.location.hash) {
          window.history.pushState(null, '', window.location.pathname);
        }
        document.body.style.overflow = "auto";
      }

      // --- Data Fetching ---
      async function loadComments(id) {
        modalCommentsLoader.style.display = 'block';
        modalCommentsError.style.display = 'none';
        modalCommentsContainer.innerHTML = '';

        try {
          const response = await fetch(`/api/comments/${id}`);
          if (!response.ok) throw new Error(`Server error: ${response.status}`);
          const data = await response.json();

          // set up the modal header
          modalUserAvatar.src = `/api/image?url=${encodeURIComponent(data.caption.user.profile_pic_url)}`;
          modalUserUsername.textContent = data.caption.user.username;
          modalUserUsername.href = `/${data.caption.user.username}`;

          // helper to build one comment (or caption)
          function makeCommentNode(user, text) {
            const item = document.createElement('div');
            item.className = 'comment-item';

            // avatar + loader
            const avatarWrap = document.createElement('div');
            avatarWrap.className = 'comment-avatar-container';

            const loader = document.createElement('div');
            loader.className = 'comment-avatar-loader';
            avatarWrap.appendChild(loader);

            const img = document.createElement('img');
            img.className = 'comment-avatar';
            img.src = `/api/image?url=${encodeURIComponent(user.profile_pic_url)}`;
            img.alt = user.username;
            img.onload = img.onerror = () => {
              loader.style.display = 'none';
            };
            avatarWrap.appendChild(img);
            item.appendChild(avatarWrap);

            // text
            const txt = document.createElement('div');
            txt.className = 'comment-text';
            const nameLink = document.createElement('a');
            nameLink.href = `/${user.username}`;
            nameLink.textContent = user.username;
            txt.appendChild(nameLink);
            txt.insertAdjacentHTML('beforeend', ' ' + formatCommentText(text));
            item.appendChild(txt);

            return item;
          }

          const fragment = document.createDocumentFragment();

          // caption first
          if (data.caption && data.caption.text) {
            fragment.appendChild(
              makeCommentNode(data.caption.user, data.caption.text)
            );
          }

          // then each comment
          data.comments.forEach(c => {
            fragment.appendChild(makeCommentNode(c.user, c.text));
          });

          modalCommentsContainer.appendChild(fragment);
        } catch (err) {
          console.error(err);
          modalCommentsError.textContent = `Could not load comments. ${err.message}`;
          modalCommentsError.style.display = 'block';
        } finally {
          modalCommentsLoader.style.display = 'none';
        }
      }

      async function loadMorePosts() {
        if (isLoading || !nextCursor) return;
        isLoading = true;
        const loadingIndicator = document.getElementById('loadingIndicator');
        const errorDiv = document.getElementById('errorMessage');
        const loadMoreBtn = document.getElementById('loadMoreBtn');
        loadingIndicator.style.display = 'block';
        loadMoreBtn.style.display = 'none';
        errorDiv.style.display = 'none';
        try {
          const response = await fetch(`/api/${username}/posts?after=${encodeURIComponent(nextCursor)}`);
          if (!response.ok) throw new Error(`Server responded with status ${response.status}`);
          const data = await response.json();
          if (data.error) throw new Error(data.error);
          if (data.posts && data.posts.length > 0) {
            const fragment = document.createDocumentFragment();
            data.posts.forEach(post => {
              const mediaItem = document.createElement("div");
              mediaItem.className = "media-item";
              mediaItem.id = `post-${post.pk}`;
              mediaItem.dataset.imageUrl = post.display_url || post.thumbnail_url;
              mediaItem.dataset.isVideo = post.is_video;
              mediaItem.dataset.videoUrl = post.video_url || '';
              mediaItem.dataset.pk = post.pk;
              mediaItem.onclick = () => openModal(mediaItem.dataset.imageUrl, mediaItem.dataset.isVideo === 'true', mediaItem.dataset.videoUrl, mediaItem.dataset.pk);
              const img = document.createElement("img");
              img.src = `/api/image?url=${encodeURIComponent(mediaItem.dataset.imageUrl)}`;
              img.alt = "Post";
              img.loading = "lazy";
              mediaItem.appendChild(img);
              if (post.is_video) {
                const videoIndicator = document.createElement("div");
                videoIndicator.className = "video-indicator";
                mediaItem.appendChild(videoIndicator);
              }
              fragment.appendChild(mediaItem);
            });
            mediaGrid.appendChild(fragment);
            nextCursor = data.nextCursor;
            if (!data.hasMore) nextCursor = null;
          } else {
            nextCursor = null;
          }
        } catch (error) {
          console.error("Error loading more posts:", error);
          errorDiv.textContent = `Failed to load posts. ${error.message}`;
          errorDiv.style.display = 'block';
          loadMoreBtn.textContent = 'Try Again';
        } finally {
          isLoading = false;
          loadingIndicator.style.display = 'none';
          if (nextCursor) loadMoreBtn.style.display = 'inline-block';
        }
      }

      // --- Event Listeners ---
      document.addEventListener("DOMContentLoaded", () => {
        // Handle deep linking via URL hash
        if (window.location.hash && window.location.hash.startsWith('#post-')) {
          const postId = window.location.hash.slice(1); // Remove #
          const postElement = document.getElementById(postId);
          if (postElement) {
            openModal(
              postElement.dataset.imageUrl,
              postElement.dataset.isVideo === 'true',
              postElement.dataset.videoUrl,
              postElement.dataset.pk
            );
          }
        }

        // Handle infinite scroll
        if (nextCursor) {
          const loadMoreBtn = document.getElementById('loadMoreBtn');
          loadMoreBtn.style.display = 'inline-block';
          window.addEventListener("scroll", () => {
            if (isLoading || !nextCursor) return;
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000) {
              loadMorePosts();
            }
          });
        }

        // Handle Escape key and popstate for closing modal
        window.addEventListener("keydown", (event) => {
          if (event.key === "Escape") closeModal();
        });
        window.addEventListener("popstate", () => {
          if (modal.style.display === 'flex') closeModal();
        });

        // Handle grid image loading errors
        mediaGrid.addEventListener("error", (e) => {
          if (e.target.tagName === 'IMG') {
            const parent = e.target.parentElement;
            parent.innerHTML = '<div class="failed-load">Failed to load</div>';
          }
        }, true);
      });
    </script>
  </body>
</html>
